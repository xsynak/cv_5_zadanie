
zad_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000179c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001924  08001924  00011924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800193c  0800193c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800193c  0800193c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800193c  0800193c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000047bf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013af  00000000  00000000  000247f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005c8  00000000  00000000  00025ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000520  00000000  00000000  00026170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015261  00000000  00000000  00026690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004957  00000000  00000000  0003b8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006ff47  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b018f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001648  00000000  00000000  000b01e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800190c 	.word	0x0800190c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800190c 	.word	0x0800190c

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	fab3 f383 	clz	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	fa03 f202 	lsl.w	r2, r3, r2
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	430a      	orrs	r2, r1
 8000352:	3302      	adds	r3, #2
 8000354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40010000 	.word	0x40010000

08000368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa93 f3a3 	rbit	r3, r3
 8000382:	613b      	str	r3, [r7, #16]
  return result;
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	401a      	ands	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	fa93 f3a3 	rbit	r3, r3
 80003a2:	61bb      	str	r3, [r7, #24]
  return result;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	fab3 f383 	clz	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]
}
 80003ba:	bf00      	nop
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b089      	sub	sp, #36	; 0x24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	fa93 f3a3 	rbit	r3, r3
 80003e0:	613b      	str	r3, [r7, #16]
  return result;
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	fab3 f383 	clz	r3, r3
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	401a      	ands	r2, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	fa93 f3a3 	rbit	r3, r3
 8000400:	61bb      	str	r3, [r7, #24]
  return result;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	fab3 f383 	clz	r3, r3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	6879      	ldr	r1, [r7, #4]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	431a      	orrs	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	bf00      	nop
 800041a:	3724      	adds	r7, #36	; 0x24
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000462:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000466:	f7ff ff39 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800046a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800046e:	f7ff ff35 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000472:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000476:	f7ff ff31 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 800047a:	2110      	movs	r1, #16
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f7ff ffd0 	bl	8000424 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000484:	2310      	movs	r3, #16
 8000486:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000488:	2301      	movs	r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f000 febe 	bl	8001220 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE4);
 80004a4:	4919      	ldr	r1, [pc, #100]	; (800050c <MX_GPIO_Init+0xcc>)
 80004a6:	2001      	movs	r0, #1
 80004a8:	f7ff ff30 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(Tlacidlo_GPIO_Port, Tlacidlo_Pin, LL_GPIO_PULL_UP);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2110      	movs	r1, #16
 80004b0:	4817      	ldr	r0, [pc, #92]	; (8000510 <MX_GPIO_Init+0xd0>)
 80004b2:	f7ff ff88 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(Tlacidlo_GPIO_Port, Tlacidlo_Pin, LL_GPIO_MODE_INPUT);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2110      	movs	r1, #16
 80004ba:	4815      	ldr	r0, [pc, #84]	; (8000510 <MX_GPIO_Init+0xd0>)
 80004bc:	f7ff ff54 	bl	8000368 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80004c0:	2310      	movs	r3, #16
 80004c2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004c8:	2301      	movs	r3, #1
 80004ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004ce:	2300      	movs	r3, #0
 80004d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (BUTTON_EXTI_TRIGGER){
	  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80004d4:	2301      	movs	r3, #1
 80004d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  }
  else{
		  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
	  }
  //EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 fca6 	bl	8000e30 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80004e4:	f7ff fe70 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fec0 	bl	8000274 <NVIC_EncodePriority>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4619      	mov	r1, r3
 80004f8:	200a      	movs	r0, #10
 80004fa:	f7ff fe91 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 80004fe:	200a      	movs	r0, #10
 8000500:	f7ff fe70 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000504:	bf00      	nop
 8000506:	3728      	adds	r7, #40	; 0x28
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	000f0001 	.word	0x000f0001
 8000510:	48000400 	.word	0x48000400

08000514 <__NVIC_SetPriorityGrouping>:
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f003 0307 	and.w	r3, r3, #7
 8000522:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <__NVIC_SetPriorityGrouping+0x44>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000530:	4013      	ands	r3, r2
 8000532:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800053c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000546:	4a04      	ldr	r2, [pc, #16]	; (8000558 <__NVIC_SetPriorityGrouping+0x44>)
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	60d3      	str	r3, [r2, #12]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <LL_RCC_HSI_Enable+0x1c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <LL_RCC_HSI_Enable+0x1c>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <LL_RCC_HSI_IsReady+0x20>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	2b02      	cmp	r3, #2
 800058a:	bf0c      	ite	eq
 800058c:	2301      	moveq	r3, #1
 800058e:	2300      	movne	r3, #0
 8000590:	b2db      	uxtb	r3, r3
}
 8000592:	4618      	mov	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	4904      	ldr	r1, [pc, #16]	; (80005c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005b6:	4313      	orrs	r3, r2
 80005b8:	600b      	str	r3, [r1, #0]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <LL_RCC_SetSysClkSource+0x24>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	f023 0203 	bic.w	r2, r3, #3
 80005dc:	4904      	ldr	r1, [pc, #16]	; (80005f0 <LL_RCC_SetSysClkSource+0x24>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	604b      	str	r3, [r1, #4]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	40021000 	.word	0x40021000

080005f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <LL_RCC_GetSysClkSource+0x18>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f003 030c 	and.w	r3, r3, #12
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <LL_RCC_SetAHBPrescaler+0x24>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000620:	4904      	ldr	r1, [pc, #16]	; (8000634 <LL_RCC_SetAHBPrescaler+0x24>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4313      	orrs	r3, r2
 8000626:	604b      	str	r3, [r1, #4]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000

08000638 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000648:	4904      	ldr	r1, [pc, #16]	; (800065c <LL_RCC_SetAPB1Prescaler+0x24>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4313      	orrs	r3, r2
 800064e:	604b      	str	r3, [r1, #4]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000

08000660 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <LL_RCC_SetAPB2Prescaler+0x24>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000670:	4904      	ldr	r1, [pc, #16]	; (8000684 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4313      	orrs	r3, r2
 8000676:	604b      	str	r3, [r1, #4]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000

08000688 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000692:	69da      	ldr	r2, [r3, #28]
 8000694:	4907      	ldr	r1, [pc, #28]	; (80006b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4313      	orrs	r3, r2
 800069a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800069e:	69da      	ldr	r2, [r3, #28]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4013      	ands	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000

080006b8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006c2:	699a      	ldr	r2, [r3, #24]
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4013      	ands	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40021000 	.word	0x40021000

080006e8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <LL_FLASH_SetLatency+0x24>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f023 0207 	bic.w	r2, r3, #7
 80006f8:	4904      	ldr	r1, [pc, #16]	; (800070c <LL_FLASH_SetLatency+0x24>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	600b      	str	r3, [r1, #0]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40022000 	.word	0x40022000

08000710 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <LL_FLASH_GetLatency+0x18>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f003 0307 	and.w	r3, r3, #7
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40022000 	.word	0x40022000

0800072c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4013      	ands	r3, r2
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	bf0c      	ite	eq
 8000742:	2301      	moveq	r3, #1
 8000744:	2300      	movne	r3, #0
 8000746:	b2db      	uxtb	r3, r3
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40010400 	.word	0x40010400

08000758 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6153      	str	r3, [r2, #20]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40010400 	.word	0x40010400

08000778 <LL_GPIO_IsInputPinSet>:
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	691a      	ldr	r2, [r3, #16]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	4013      	ands	r3, r2
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	bf0c      	ite	eq
 8000790:	2301      	moveq	r3, #1
 8000792:	2300      	movne	r3, #0
 8000794:	b2db      	uxtb	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <LL_GPIO_ResetOutputPin>:
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007be:	b480      	push	{r7}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	4013      	ands	r3, r2
 80007d4:	041a      	lsls	r2, r3, #16
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	43d9      	mvns	r1, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	400b      	ands	r3, r1
 80007de:	431a      	orrs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	619a      	str	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff ff5f 	bl	80006b8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80007fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80007fe:	f7ff ff43 	bl	8000688 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000802:	2003      	movs	r0, #3
 8000804:	f7ff fe86 	bl	8000514 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f816 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff fe18 	bl	8000440 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000810:	f000 f960 	bl	8000ad4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(switch_state)
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <main+0x44>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d005      	beq.n	8000828 <main+0x38>
	  	  {
		  	  LL_GPIO_TogglePin(GPIO_PORT_LED,GPIO_BSRR_BS_4);
 800081c:	2110      	movs	r1, #16
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f7ff ffcc 	bl	80007be <LL_GPIO_TogglePin>
 8000826:	e7f5      	b.n	8000814 <main+0x24>
	  		  //GPIOA->BRR |= GPIO_BRR_BR_4;
	  		  //for(uint16_t i=0; i<0xFF00; i++){}
	  	  }
	  	  else
	  	  {
	  		LL_GPIO_ResetOutputPin(GPIO_PORT_LED,GPIO_BRR_BR_4);
 8000828:	2110      	movs	r1, #16
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f7ff ffb8 	bl	80007a2 <LL_GPIO_ResetOutputPin>
	  if(switch_state)
 8000832:	e7ef      	b.n	8000814 <main+0x24>
 8000834:	20000020 	.word	0x20000020

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ff53 	bl	80006e8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000842:	bf00      	nop
 8000844:	f7ff ff64 	bl	8000710 <LL_FLASH_GetLatency>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1fa      	bne.n	8000844 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800084e:	f7ff fe85 	bl	800055c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000852:	bf00      	nop
 8000854:	f7ff fe92 	bl	800057c <LL_RCC_HSI_IsReady>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d1fa      	bne.n	8000854 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800085e:	2010      	movs	r0, #16
 8000860:	f7ff fe9e 	bl	80005a0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fed3 	bl	8000610 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fee4 	bl	8000638 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fef5 	bl	8000660 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fea8 	bl	80005cc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800087c:	bf00      	nop
 800087e:	f7ff feb9 	bl	80005f4 <LL_RCC_GetSysClkSource>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1fa      	bne.n	800087e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <SystemClock_Config+0x60>)
 800088a:	f000 ffd7 	bl	800183c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800088e:	4802      	ldr	r0, [pc, #8]	; (8000898 <SystemClock_Config+0x60>)
 8000890:	f001 f808 	bl	80018a4 <LL_SetSystemCoreClock>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	007a1200 	.word	0x007a1200

0800089c <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4603      	mov	r3, r0
 80008ac:	70fb      	strb	r3, [r7, #3]
 80008ae:	460b      	mov	r3, r1
 80008b0:	70bb      	strb	r3, [r7, #2]
 80008b2:	4613      	mov	r3, r2
 80008b4:	707b      	strb	r3, [r7, #1]
	  //type your code for "checkButtonState" implementation here:
	uint8_t button_state = 0, timeout = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	2300      	movs	r3, #0
 80008bc:	73bb      	strb	r3, [r7, #14]

		while(button_state < samples_required && timeout < samples_window)
 80008be:	e013      	b.n	80008e8 <checkButtonState+0x4c>
		{
			if(LL_GPIO_IsInputPinSet(PORT, PIN))
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	4619      	mov	r1, r3
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff57 	bl	8000778 <LL_GPIO_IsInputPinSet>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d003      	beq.n	80008d8 <checkButtonState+0x3c>
			//(!(PORT->IDR & ((!edge) << PIN))
			{
				button_state += 1;
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	3301      	adds	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	e001      	b.n	80008dc <checkButtonState+0x40>
			}
			else
			{
				button_state = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	73fb      	strb	r3, [r7, #15]
			}

			timeout += 1;
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	3301      	adds	r3, #1
 80008e0:	73bb      	strb	r3, [r7, #14]
			LL_mDelay(1);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f000 ffb8 	bl	8001858 <LL_mDelay>
		while(button_state < samples_required && timeout < samples_window)
 80008e8:	7bfa      	ldrb	r2, [r7, #15]
 80008ea:	7e3b      	ldrb	r3, [r7, #24]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d203      	bcs.n	80008f8 <checkButtonState+0x5c>
 80008f0:	7bba      	ldrb	r2, [r7, #14]
 80008f2:	787b      	ldrb	r3, [r7, #1]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d3e3      	bcc.n	80008c0 <checkButtonState+0x24>
		}

		if((button_state >= samples_required) && (timeout <= samples_window))
 80008f8:	7bfa      	ldrb	r2, [r7, #15]
 80008fa:	7e3b      	ldrb	r3, [r7, #24]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d305      	bcc.n	800090c <checkButtonState+0x70>
 8000900:	7bba      	ldrb	r2, [r7, #14]
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	429a      	cmp	r2, r3
 8000906:	d801      	bhi.n	800090c <checkButtonState+0x70>
		{
			return 1;
 8000908:	2301      	movs	r3, #1
 800090a:	e000      	b.n	800090e <checkButtonState+0x72>
		}
		else
		{
			return 0;
 800090c:	2300      	movs	r3, #0
		}
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if(checkButtonState(GPIO_PORT_BUTTON,
 800091e:	2314      	movs	r3, #20
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2332      	movs	r3, #50	; 0x32
 8000924:	2201      	movs	r2, #1
 8000926:	2104      	movs	r1, #4
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <EXTI4_IRQHandler+0x44>)
 800092a:	f7ff ffb7 	bl	800089c <checkButtonState>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <EXTI4_IRQHandler+0x2a>
							GPIO_PIN_BUTTON,
							BUTTON_EXTI_TRIGGER,
							BUTTON_EXTI_SAMPLES_WINDOW,
							BUTTON_EXTI_SAMPLES_REQUIRED))
		{
			switch_state ^= 1;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <EXTI4_IRQHandler+0x48>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	f083 0301 	eor.w	r3, r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <EXTI4_IRQHandler+0x48>)
 8000940:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END EXTI4_IRQn 0 */

if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000942:	2010      	movs	r0, #16
 8000944:	f7ff fef2 	bl	800072c <LL_EXTI_IsActiveFlag_0_31>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <EXTI4_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800094e:	2010      	movs	r0, #16
 8000950:	f7ff ff02 	bl	8000758 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	48000400 	.word	0x48000400
 8000960:	20000020 	.word	0x20000020

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <LL_AHB1_GRP1_EnableClock>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4013      	ands	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000

08000a10 <LL_APB1_GRP1_EnableClock>:
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	4907      	ldr	r1, [pc, #28]	; (8000a3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a26:	69da      	ldr	r2, [r3, #28]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40021000 	.word	0x40021000

08000a40 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3308      	adds	r3, #8
 8000a98:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	e853 3f00 	ldrex	r3, [r3]
 8000aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3308      	adds	r3, #8
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	61ba      	str	r2, [r7, #24]
 8000ab2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ab4:	6979      	ldr	r1, [r7, #20]
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	e841 2300 	strex	r3, r2, [r1]
 8000abc:	613b      	str	r3, [r7, #16]
   return(result);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1e7      	bne.n	8000a94 <LL_USART_DisableIT_CTS+0x8>
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000afe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b02:	f7ff ff85 	bl	8000a10 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b0a:	f7ff ff69 	bl	80009e0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b0e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b24:	2307      	movs	r3, #7
 8000b26:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b30:	f000 fb76 	bl	8001220 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000b34:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000b38:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b46:	230c      	movs	r3, #12
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <MX_USART2_UART_Init+0xa4>)
 8000b5a:	f000 fde9 	bl	8001730 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <MX_USART2_UART_Init+0xa4>)
 8000b60:	f7ff ff94 	bl	8000a8c <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_USART2_UART_Init+0xa4>)
 8000b66:	f7ff ff7b 	bl	8000a60 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <MX_USART2_UART_Init+0xa4>)
 8000b6c:	f7ff ff68 	bl	8000a40 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3738      	adds	r7, #56	; 0x38
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40004400 	.word	0x40004400

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff ff09 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f000 fe8b 	bl	80018c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fe1f 	bl	80007f0 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000bc0:	08001944 	.word	0x08001944
  ldr r2, =_sbss
 8000bc4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000bc8:	20000024 	.word	0x20000024

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <LL_EXTI_EnableIT_0_31>:
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <LL_EXTI_EnableIT_0_31+0x20>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4904      	ldr	r1, [pc, #16]	; (8000bf0 <LL_EXTI_EnableIT_0_31+0x20>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	600b      	str	r3, [r1, #0]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <LL_EXTI_EnableIT_32_63>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <LL_EXTI_EnableIT_32_63+0x20>)
 8000bfe:	6a1a      	ldr	r2, [r3, #32]
 8000c00:	4904      	ldr	r1, [pc, #16]	; (8000c14 <LL_EXTI_EnableIT_32_63+0x20>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	620b      	str	r3, [r1, #32]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40010400 	.word	0x40010400

08000c18 <LL_EXTI_DisableIT_0_31>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <LL_EXTI_DisableIT_0_31+0x24>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	4904      	ldr	r1, [pc, #16]	; (8000c3c <LL_EXTI_DisableIT_0_31+0x24>)
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	600b      	str	r3, [r1, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40010400 	.word	0x40010400

08000c40 <LL_EXTI_DisableIT_32_63>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <LL_EXTI_DisableIT_32_63+0x24>)
 8000c4a:	6a1a      	ldr	r2, [r3, #32]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	4904      	ldr	r1, [pc, #16]	; (8000c64 <LL_EXTI_DisableIT_32_63+0x24>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	620b      	str	r3, [r1, #32]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40010400 	.word	0x40010400

08000c68 <LL_EXTI_EnableEvent_0_31>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4904      	ldr	r1, [pc, #16]	; (8000c88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	604b      	str	r3, [r1, #4]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40010400 	.word	0x40010400

08000c8c <LL_EXTI_EnableEvent_32_63>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <LL_EXTI_EnableEvent_32_63+0x20>)
 8000c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c98:	4904      	ldr	r1, [pc, #16]	; (8000cac <LL_EXTI_EnableEvent_32_63+0x20>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	40010400 	.word	0x40010400

08000cb0 <LL_EXTI_DisableEvent_0_31>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	4904      	ldr	r1, [pc, #16]	; (8000cd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	604b      	str	r3, [r1, #4]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40010400 	.word	0x40010400

08000cd8 <LL_EXTI_DisableEvent_32_63>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <LL_EXTI_DisableEvent_32_63+0x24>)
 8000ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4904      	ldr	r1, [pc, #16]	; (8000cfc <LL_EXTI_DisableEvent_32_63+0x24>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40010400 	.word	0x40010400

08000d00 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	4904      	ldr	r1, [pc, #16]	; (8000d20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40010400 	.word	0x40010400

08000d24 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d30:	4904      	ldr	r1, [pc, #16]	; (8000d44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40010400 	.word	0x40010400

08000d48 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4904      	ldr	r1, [pc, #16]	; (8000d6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	608b      	str	r3, [r1, #8]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40010400 	.word	0x40010400

08000d70 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	4904      	ldr	r1, [pc, #16]	; (8000d94 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40010400 	.word	0x40010400

08000d98 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	4904      	ldr	r1, [pc, #16]	; (8000db8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	40010400 	.word	0x40010400

08000dbc <LL_EXTI_EnableFallingTrig_32_63>:
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc8:	4904      	ldr	r1, [pc, #16]	; (8000ddc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40010400 	.word	0x40010400

08000de0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4904      	ldr	r1, [pc, #16]	; (8000e04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	60cb      	str	r3, [r1, #12]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40010400 	.word	0x40010400

08000e08 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4904      	ldr	r1, [pc, #16]	; (8000e2c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40010400 	.word	0x40010400

08000e30 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7a1b      	ldrb	r3, [r3, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80cd 	beq.w	8000fe0 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d061      	beq.n	8000f12 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7a5b      	ldrb	r3, [r3, #9]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d01c      	beq.n	8000e90 <LL_EXTI_Init+0x60>
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	dc25      	bgt.n	8000ea6 <LL_EXTI_Init+0x76>
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <LL_EXTI_Init+0x34>
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d00b      	beq.n	8000e7a <LL_EXTI_Init+0x4a>
 8000e62:	e020      	b.n	8000ea6 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff21 	bl	8000cb0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff feac 	bl	8000bd0 <LL_EXTI_EnableIT_0_31>
          break;
 8000e78:	e018      	b.n	8000eac <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff feca 	bl	8000c18 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff feed 	bl	8000c68 <LL_EXTI_EnableEvent_0_31>
          break;
 8000e8e:	e00d      	b.n	8000eac <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fe9b 	bl	8000bd0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fee2 	bl	8000c68 <LL_EXTI_EnableEvent_0_31>
          break;
 8000ea4:	e002      	b.n	8000eac <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
          break;
 8000eaa:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7a9b      	ldrb	r3, [r3, #10]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d02e      	beq.n	8000f12 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7a9b      	ldrb	r3, [r3, #10]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d01c      	beq.n	8000ef6 <LL_EXTI_Init+0xc6>
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	dc25      	bgt.n	8000f0c <LL_EXTI_Init+0xdc>
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d002      	beq.n	8000eca <LL_EXTI_Init+0x9a>
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d00b      	beq.n	8000ee0 <LL_EXTI_Init+0xb0>
 8000ec8:	e020      	b.n	8000f0c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff86 	bl	8000de0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff11 	bl	8000d00 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000ede:	e019      	b.n	8000f14 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff2f 	bl	8000d48 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff52 	bl	8000d98 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000ef4:	e00e      	b.n	8000f14 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff00 	bl	8000d00 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff47 	bl	8000d98 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f0a:	e003      	b.n	8000f14 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
            break;
 8000f10:	e000      	b.n	8000f14 <LL_EXTI_Init+0xe4>
        }
      }
 8000f12:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d076      	beq.n	800100a <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7a5b      	ldrb	r3, [r3, #9]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d01c      	beq.n	8000f5e <LL_EXTI_Init+0x12e>
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	dc25      	bgt.n	8000f74 <LL_EXTI_Init+0x144>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <LL_EXTI_Init+0x102>
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d00b      	beq.n	8000f48 <LL_EXTI_Init+0x118>
 8000f30:	e020      	b.n	8000f74 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fece 	bl	8000cd8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe57 	bl	8000bf4 <LL_EXTI_EnableIT_32_63>
          break;
 8000f46:	e018      	b.n	8000f7a <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fe77 	bl	8000c40 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe98 	bl	8000c8c <LL_EXTI_EnableEvent_32_63>
          break;
 8000f5c:	e00d      	b.n	8000f7a <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fe46 	bl	8000bf4 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fe8d 	bl	8000c8c <LL_EXTI_EnableEvent_32_63>
          break;
 8000f72:	e002      	b.n	8000f7a <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
          break;
 8000f78:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7a9b      	ldrb	r3, [r3, #10]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d043      	beq.n	800100a <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7a9b      	ldrb	r3, [r3, #10]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d01c      	beq.n	8000fc4 <LL_EXTI_Init+0x194>
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	dc25      	bgt.n	8000fda <LL_EXTI_Init+0x1aa>
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d002      	beq.n	8000f98 <LL_EXTI_Init+0x168>
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d00b      	beq.n	8000fae <LL_EXTI_Init+0x17e>
 8000f96:	e020      	b.n	8000fda <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff33 	bl	8000e08 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff febc 	bl	8000d24 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000fac:	e02e      	b.n	800100c <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fedc 	bl	8000d70 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fefd 	bl	8000dbc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000fc2:	e023      	b.n	800100c <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff feab 	bl	8000d24 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fef2 	bl	8000dbc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000fd8:	e018      	b.n	800100c <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
            break;
 8000fde:	e015      	b.n	800100c <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe17 	bl	8000c18 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fe5e 	bl	8000cb0 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe21 	bl	8000c40 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fe68 	bl	8000cd8 <LL_EXTI_DisableEvent_32_63>
 8001008:	e000      	b.n	800100c <LL_EXTI_Init+0x1dc>
      }
 800100a:	bf00      	nop
#endif
  }
  return status;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <LL_GPIO_SetPinMode>:
{
 8001016:	b480      	push	{r7}
 8001018:	b089      	sub	sp, #36	; 0x24
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	613b      	str	r3, [r7, #16]
  return result;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2103      	movs	r1, #3
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	401a      	ands	r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	61bb      	str	r3, [r7, #24]
  return result;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	431a      	orrs	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	3724      	adds	r7, #36	; 0x24
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_GPIO_SetPinOutputType>:
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	43db      	mvns	r3, r3
 8001088:	401a      	ands	r2, r3
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	fb01 f303 	mul.w	r3, r1, r3
 8001092:	431a      	orrs	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	605a      	str	r2, [r3, #4]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_GPIO_SetPinSpeed>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	613b      	str	r3, [r7, #16]
  return result;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2103      	movs	r1, #3
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	401a      	ands	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	61bb      	str	r3, [r7, #24]
  return result;
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fab3 f383 	clz	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	609a      	str	r2, [r3, #8]
}
 80010f6:	bf00      	nop
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_GPIO_SetPinPull>:
{
 8001102:	b480      	push	{r7}
 8001104:	b089      	sub	sp, #36	; 0x24
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa93 f3a3 	rbit	r3, r3
 800111c:	613b      	str	r3, [r7, #16]
  return result;
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2103      	movs	r1, #3
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	401a      	ands	r2, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	61bb      	str	r3, [r7, #24]
  return result;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	431a      	orrs	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	60da      	str	r2, [r3, #12]
}
 8001154:	bf00      	nop
 8001156:	3724      	adds	r7, #36	; 0x24
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_GPIO_SetAFPin_0_7>:
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	613b      	str	r3, [r7, #16]
  return result;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	210f      	movs	r1, #15
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	401a      	ands	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	61bb      	str	r3, [r7, #24]
  return result;
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	431a      	orrs	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	621a      	str	r2, [r3, #32]
}
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_GPIO_SetAFPin_8_15>:
{
 80011be:	b480      	push	{r7}
 80011c0:	b089      	sub	sp, #36	; 0x24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa93 f3a3 	rbit	r3, r3
 80011da:	613b      	str	r3, [r7, #16]
  return result;
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	fab3 f383 	clz	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	210f      	movs	r1, #15
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	401a      	ands	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	61bb      	str	r3, [r7, #24]
  return result;
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	431a      	orrs	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001214:	bf00      	nop
 8001216:	3724      	adds	r7, #36	; 0x24
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	613b      	str	r3, [r7, #16]
  return result;
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001242:	e051      	b.n	80012e8 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d043      	beq.n	80012e2 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d003      	beq.n	800126a <LL_GPIO_Init+0x4a>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d10e      	bne.n	8001288 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	461a      	mov	r2, r3
 8001270:	69b9      	ldr	r1, [r7, #24]
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff16 	bl	80010a4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	6819      	ldr	r1, [r3, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	461a      	mov	r2, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fef6 	bl	8001074 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	461a      	mov	r2, r3
 800128e:	69b9      	ldr	r1, [r7, #24]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff36 	bl	8001102 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d11a      	bne.n	80012d4 <LL_GPIO_Init+0xb4>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	60bb      	str	r3, [r7, #8]
  return result;
 80012aa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b07      	cmp	r3, #7
 80012b4:	d807      	bhi.n	80012c6 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	461a      	mov	r2, r3
 80012bc:	69b9      	ldr	r1, [r7, #24]
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff4e 	bl	8001160 <LL_GPIO_SetAFPin_0_7>
 80012c4:	e006      	b.n	80012d4 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	461a      	mov	r2, r3
 80012cc:	69b9      	ldr	r1, [r7, #24]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff75 	bl	80011be <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	461a      	mov	r2, r3
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fe9a 	bl	8001016 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	fa22 f303 	lsr.w	r3, r2, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1a6      	bne.n	8001244 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <LL_RCC_HSI_IsReady>:
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <LL_RCC_HSI_IsReady+0x20>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b02      	cmp	r3, #2
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000

08001324 <LL_RCC_LSE_IsReady>:
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <LL_RCC_LSE_IsReady+0x20>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b02      	cmp	r3, #2
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000

08001348 <LL_RCC_GetSysClkSource>:
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <LL_RCC_GetSysClkSource+0x18>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000

08001364 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <LL_RCC_GetAHBPrescaler+0x18>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000

080013b8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <LL_RCC_GetUSARTClockSource+0x28>)
 80013c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c4:	2103      	movs	r1, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	401a      	ands	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	061b      	lsls	r3, r3, #24
 80013d2:	4313      	orrs	r3, r2
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000

080013e4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <LL_RCC_PLL_GetMainSource+0x18>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <LL_RCC_PLL_GetPrediv+0x18>)
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	f003 030f 	and.w	r3, r3, #15
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000

08001438 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001440:	f000 f864 	bl	800150c <RCC_GetSystemClockFreq>
 8001444:	4602      	mov	r2, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f882 	bl	8001558 <RCC_GetHCLKClockFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f890 	bl	8001584 <RCC_GetPCLK1ClockFreq>
 8001464:	4602      	mov	r2, r0
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f89c 	bl	80015ac <RCC_GetPCLK2ClockFreq>
 8001474:	4602      	mov	r2, r0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60da      	str	r2, [r3, #12]
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d12d      	bne.n	80014f2 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff8e 	bl	80013b8 <LL_RCC_GetUSARTClockSource>
 800149c:	4603      	mov	r3, r0
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d00a      	beq.n	80014b8 <LL_RCC_GetUSARTClockFreq+0x34>
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d819      	bhi.n	80014da <LL_RCC_GetUSARTClockFreq+0x56>
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d002      	beq.n	80014b0 <LL_RCC_GetUSARTClockFreq+0x2c>
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d00c      	beq.n	80014c8 <LL_RCC_GetUSARTClockFreq+0x44>
 80014ae:	e014      	b.n	80014da <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80014b0:	f000 f82c 	bl	800150c <RCC_GetSystemClockFreq>
 80014b4:	60f8      	str	r0, [r7, #12]
        break;
 80014b6:	e021      	b.n	80014fc <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80014b8:	f7ff ff22 	bl	8001300 <LL_RCC_HSI_IsReady>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d019      	beq.n	80014f6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <LL_RCC_GetUSARTClockFreq+0x84>)
 80014c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80014c6:	e016      	b.n	80014f6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80014c8:	f7ff ff2c 	bl	8001324 <LL_RCC_LSE_IsReady>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d013      	beq.n	80014fa <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80014d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80014d8:	e00f      	b.n	80014fa <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80014da:	f000 f817 	bl	800150c <RCC_GetSystemClockFreq>
 80014de:	4603      	mov	r3, r0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f839 	bl	8001558 <RCC_GetHCLKClockFreq>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f84b 	bl	8001584 <RCC_GetPCLK1ClockFreq>
 80014ee:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80014f0:	e004      	b.n	80014fc <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80014f2:	bf00      	nop
 80014f4:	e002      	b.n	80014fc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80014f6:	bf00      	nop
 80014f8:	e000      	b.n	80014fc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80014fa:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80014fc:	68fb      	ldr	r3, [r7, #12]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	007a1200 	.word	0x007a1200

0800150c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001516:	f7ff ff17 	bl	8001348 <LL_RCC_GetSysClkSource>
 800151a:	4603      	mov	r3, r0
 800151c:	2b08      	cmp	r3, #8
 800151e:	d00c      	beq.n	800153a <RCC_GetSystemClockFreq+0x2e>
 8001520:	2b08      	cmp	r3, #8
 8001522:	d80e      	bhi.n	8001542 <RCC_GetSystemClockFreq+0x36>
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <RCC_GetSystemClockFreq+0x22>
 8001528:	2b04      	cmp	r3, #4
 800152a:	d003      	beq.n	8001534 <RCC_GetSystemClockFreq+0x28>
 800152c:	e009      	b.n	8001542 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <RCC_GetSystemClockFreq+0x48>)
 8001530:	607b      	str	r3, [r7, #4]
      break;
 8001532:	e009      	b.n	8001548 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <RCC_GetSystemClockFreq+0x48>)
 8001536:	607b      	str	r3, [r7, #4]
      break;
 8001538:	e006      	b.n	8001548 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800153a:	f000 f84b 	bl	80015d4 <RCC_PLL_GetFreqDomain_SYS>
 800153e:	6078      	str	r0, [r7, #4]
      break;
 8001540:	e002      	b.n	8001548 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <RCC_GetSystemClockFreq+0x48>)
 8001544:	607b      	str	r3, [r7, #4]
      break;
 8001546:	bf00      	nop
  }

  return frequency;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	007a1200 	.word	0x007a1200

08001558 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001560:	f7ff ff00 	bl	8001364 <LL_RCC_GetAHBPrescaler>
 8001564:	4603      	mov	r3, r0
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <RCC_GetHCLKClockFreq+0x28>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	40d3      	lsrs	r3, r2
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	08001924 	.word	0x08001924

08001584 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800158c:	f7ff fef8 	bl	8001380 <LL_RCC_GetAPB1Prescaler>
 8001590:	4603      	mov	r3, r0
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <RCC_GetPCLK1ClockFreq+0x24>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	40d3      	lsrs	r3, r2
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	08001934 	.word	0x08001934

080015ac <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80015b4:	f7ff fef2 	bl	800139c <LL_RCC_GetAPB2Prescaler>
 80015b8:	4603      	mov	r3, r0
 80015ba:	0adb      	lsrs	r3, r3, #11
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <RCC_GetPCLK2ClockFreq+0x24>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	40d3      	lsrs	r3, r2
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	08001934 	.word	0x08001934

080015d4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80015e2:	f7ff feff 	bl	80013e4 <LL_RCC_PLL_GetMainSource>
 80015e6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d003      	beq.n	80015fe <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80015f6:	e005      	b.n	8001604 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80015fa:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80015fc:	e005      	b.n	800160a <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001600:	60fb      	str	r3, [r7, #12]
      break;
 8001602:	e002      	b.n	800160a <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001606:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001608:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800160a:	f7ff ff07 	bl	800141c <LL_RCC_PLL_GetPrediv>
 800160e:	4603      	mov	r3, r0
 8001610:	3301      	adds	r3, #1
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	fbb2 f4f3 	udiv	r4, r2, r3
 8001618:	f7ff fef2 	bl	8001400 <LL_RCC_PLL_GetMultiplicator>
 800161c:	4603      	mov	r3, r0
 800161e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001622:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001626:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	fa92 f2a2 	rbit	r2, r2
 800162e:	603a      	str	r2, [r7, #0]
  return result;
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	fab2 f282 	clz	r2, r2
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	40d3      	lsrs	r3, r2
 800163a:	3302      	adds	r3, #2
 800163c:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	003d0900 	.word	0x003d0900
 800164c:	007a1200 	.word	0x007a1200

08001650 <LL_USART_IsEnabled>:
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <LL_USART_IsEnabled+0x18>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_USART_IsEnabled+0x1a>
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_USART_SetStopBitsLength>:
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	605a      	str	r2, [r3, #4]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_USART_SetHWFlowCtrl>:
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_USART_SetBaudRate>:
{
 80016c2:	b480      	push	{r7}
 80016c4:	b087      	sub	sp, #28
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016d6:	d11a      	bne.n	800170e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	005a      	lsls	r2, r3, #1
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	441a      	add	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	60da      	str	r2, [r3, #12]
}
 800170c:	e00a      	b.n	8001724 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	085a      	lsrs	r2, r3, #1
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	441a      	add	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	fbb2 f3f3 	udiv	r3, r2, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	60da      	str	r2, [r3, #12]
}
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff84 	bl	8001650 <LL_USART_IsEnabled>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d14e      	bne.n	80017ec <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <LL_USART_Init+0xc8>)
 8001754:	4013      	ands	r3, r2
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	6851      	ldr	r1, [r2, #4]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	68d2      	ldr	r2, [r2, #12]
 800175e:	4311      	orrs	r1, r2
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	6912      	ldr	r2, [r2, #16]
 8001764:	4311      	orrs	r1, r2
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	6992      	ldr	r2, [r2, #24]
 800176a:	430a      	orrs	r2, r1
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff7c 	bl	8001676 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff89 	bl	800169c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <LL_USART_Init+0xcc>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d104      	bne.n	800179c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fe76 	bl	8001484 <LL_RCC_GetUSARTClockFreq>
 8001798:	61b8      	str	r0, [r7, #24]
 800179a:	e016      	b.n	80017ca <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <LL_USART_Init+0xd0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d107      	bne.n	80017b4 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe45 	bl	8001438 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	e00a      	b.n	80017ca <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <LL_USART_Init+0xd4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d106      	bne.n	80017ca <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fe39 	bl	8001438 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00d      	beq.n	80017ec <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80017d8:	2300      	movs	r3, #0
 80017da:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	699a      	ldr	r2, [r3, #24]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69b9      	ldr	r1, [r7, #24]
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff6b 	bl	80016c2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80017ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	efff69f3 	.word	0xefff69f3
 80017fc:	40013800 	.word	0x40013800
 8001800:	40004400 	.word	0x40004400
 8001804:	40004800 	.word	0x40004800

08001808 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <LL_InitTick+0x30>)
 800181c:	3b01      	subs	r3, #1
 800181e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <LL_InitTick+0x30>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <LL_InitTick+0x30>)
 8001828:	2205      	movs	r2, #5
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e010 	.word	0xe000e010

0800183c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001844:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ffdd 	bl	8001808 <LL_InitTick>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <LL_mDelay+0x48>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001866:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186e:	d00c      	beq.n	800188a <LL_mDelay+0x32>
  {
    Delay++;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001876:	e008      	b.n	800188a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <LL_mDelay+0x48>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <LL_mDelay+0x32>
    {
      Delay--;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	607b      	str	r3, [r7, #4]
  while (Delay)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f3      	bne.n	8001878 <LL_mDelay+0x20>
    }
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <LL_SetSystemCoreClock+0x1c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000

080018c4 <__libc_init_array>:
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	4d0d      	ldr	r5, [pc, #52]	; (80018fc <__libc_init_array+0x38>)
 80018c8:	4c0d      	ldr	r4, [pc, #52]	; (8001900 <__libc_init_array+0x3c>)
 80018ca:	1b64      	subs	r4, r4, r5
 80018cc:	10a4      	asrs	r4, r4, #2
 80018ce:	2600      	movs	r6, #0
 80018d0:	42a6      	cmp	r6, r4
 80018d2:	d109      	bne.n	80018e8 <__libc_init_array+0x24>
 80018d4:	4d0b      	ldr	r5, [pc, #44]	; (8001904 <__libc_init_array+0x40>)
 80018d6:	4c0c      	ldr	r4, [pc, #48]	; (8001908 <__libc_init_array+0x44>)
 80018d8:	f000 f818 	bl	800190c <_init>
 80018dc:	1b64      	subs	r4, r4, r5
 80018de:	10a4      	asrs	r4, r4, #2
 80018e0:	2600      	movs	r6, #0
 80018e2:	42a6      	cmp	r6, r4
 80018e4:	d105      	bne.n	80018f2 <__libc_init_array+0x2e>
 80018e6:	bd70      	pop	{r4, r5, r6, pc}
 80018e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ec:	4798      	blx	r3
 80018ee:	3601      	adds	r6, #1
 80018f0:	e7ee      	b.n	80018d0 <__libc_init_array+0xc>
 80018f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018f6:	4798      	blx	r3
 80018f8:	3601      	adds	r6, #1
 80018fa:	e7f2      	b.n	80018e2 <__libc_init_array+0x1e>
 80018fc:	0800193c 	.word	0x0800193c
 8001900:	0800193c 	.word	0x0800193c
 8001904:	0800193c 	.word	0x0800193c
 8001908:	08001940 	.word	0x08001940

0800190c <_init>:
 800190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190e:	bf00      	nop
 8001910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001912:	bc08      	pop	{r3}
 8001914:	469e      	mov	lr, r3
 8001916:	4770      	bx	lr

08001918 <_fini>:
 8001918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191a:	bf00      	nop
 800191c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800191e:	bc08      	pop	{r3}
 8001920:	469e      	mov	lr, r3
 8001922:	4770      	bx	lr
